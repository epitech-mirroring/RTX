#version 450
// Input/Output
layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform writeonly image2D outputImage;
// View
layout(binding = 2) uniform readonly View {
    vec2 iResolution;
    vec3 iViewPlaneParams;
    vec3 iCameraPosition;
    mat4 iCameraMatrix;
};
// Scene
struct Triangle {
    vec3 a;
    vec3 b;
    vec3 c;
    vec3 aNormal;
    vec3 bNormal;
    vec3 cNormal;
    vec2 aUV;
    vec2 bUV;
    vec2 cUV;
};

struct Material {
    vec3 color;
    vec3 emission;
    float emissionIntensity;
    float roughness;
    float transparency;
    float refractionIndex;
    bool hasCheckerPattern;
};

struct Mesh {
    uint startIdx;
    uint endIdx;
    vec3 boundingBoxMin;
    vec3 boundingBoxMax;
    mat4 transform;
    float textureOffset; // -1 if no texture else the x offset in main texture atlas
    float textureWidth;
    Material material;
};

layout(std140, binding = 3) uniform readonly Scene {
    uint iNumMeshes;
    uint iNumTriangles;
    uint iIsSceneDirty;
    uint iIsSkyboxEnabled;
    uint iFrameIndex;
    uint iFrameCount;
    float mainTextureWidth;
};

layout(std140, binding = 4) buffer readonly Triangles {
    Triangle iTriangles[];
};

layout(std140, binding = 5) buffer readonly Meshes {
    Mesh iMeshes[];
};

layout(binding = 6) uniform sampler2D textures;

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Hit {
    bool hit;
    float distance;
    vec3 normal;
    vec3 position;
    vec2 uv;
    Mesh mesh;
};

float randomValue(inout uint seed) {
    seed = seed * 747796405 + 2891336453;
    uint res = ((seed >> ((seed >> 28) + 4)) ^ seed) * 277803737;
    res = (res >> 22) ^ res;
    return res / 4294967295.0;
}

float randomNormalValue(inout uint seed) {
    float theta = 2.0 * 3.14159265359 * randomValue(seed);
    float rho = sqrt(-2.0 * log(randomValue(seed)));
    return rho * cos(theta);
}

vec3 randomDirection(inout uint seed) {
    float x = randomNormalValue(seed);
    float y = randomNormalValue(seed);
    float z = randomNormalValue(seed);
    return normalize(vec3(x, y, z));
}

bool isRayBoundingBoxIntersect(Ray ray, vec3 boxMin, vec3 boxMax)
{
    vec3 invDir = 1 / ray.direction;
    vec3 tMin = (boxMin - ray.origin) * invDir;
    vec3 tMax = (boxMax - ray.origin) * invDir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    return tNear <= tFar;
}

Hit rayTriangle(Ray ray, Triangle tri, bool shouldHitNormalsFromBack)
{
    // If we should hit normals from the back, we need to invert the normal of the triangle
    // And swap the vertices a and c to keep the winding order
    if (shouldHitNormalsFromBack) {
        tri.aNormal = -tri.aNormal;
        tri.bNormal = -tri.bNormal;
        tri.cNormal = -tri.cNormal;

        vec3 tmp = tri.a;
        tri.a = tri.c;
        tri.c = tmp;

        tmp = tri.aNormal;
        tri.aNormal = tri.cNormal;
        tri.cNormal = tmp;
    }

    vec3 AB = tri.b - tri.a;
    vec3 AC = tri.c - tri.a;
    vec3 normal = cross(AB, AC);
    vec3 AO = ray.origin - tri.a;
    vec3 dirAO = cross(AO, ray.direction);

    float _determinant = -dot(ray.direction, normal);
    float invDet = 1 / _determinant;

    // Calculate dst to triangle & barycentric coordinates of intersection point
    float dst = dot(AO, normal) * invDet;
    float u = dot(AC, dirAO) * invDet;
    float v = -dot(AB, dirAO) * invDet;
    float w = 1 - u - v;

    // Initialize hit info
    Hit hit;
    hit.hit = _determinant >= 1E-6 && dst >= 0 && u >= 0 && v >= 0 && w >= 0;
    hit.position = ray.origin + ray.direction * dst;
    hit.normal = normalize(tri.aNormal * w + tri.bNormal * u + tri.cNormal * v);
    hit.uv = tri.aUV * w + tri.bUV * u + tri.cUV * v;
    hit.distance = dst;
    return hit;
}

Triangle getTransformedTriangle(Triangle tri, mat4 transform) {
    Triangle transformedTri;
    transformedTri.a = (transform * vec4(tri.a, 1.0)).xyz;
    transformedTri.b = (transform * vec4(tri.b, 1.0)).xyz;
    transformedTri.c = (transform * vec4(tri.c, 1.0)).xyz;
    transformedTri.aNormal = (transform * vec4(tri.aNormal, 0.0)).xyz;
    transformedTri.bNormal = (transform * vec4(tri.bNormal, 0.0)).xyz;
    transformedTri.cNormal = (transform * vec4(tri.cNormal, 0.0)).xyz;
    transformedTri.aUV = tri.aUV;
    transformedTri.bUV = tri.bUV;
    transformedTri.cUV = tri.cUV;
    return transformedTri;
}

struct BoundingBox {
    vec3 min;
    vec3 max;
};

BoundingBox getMeshBoundingBox(Mesh mesh) {
    vec3 minB = vec3(1E6, 1E6, 1E6);
    vec3 maxB = vec3(-1E6, -1E6, -1E6);
    for (uint i = mesh.startIdx; i < mesh.endIdx; i++) {
        Triangle tri = getTransformedTriangle(iTriangles[i], mesh.transform);
        minB = min(minB, min(min(tri.a, tri.b), tri.c));
        maxB = max(maxB, max(max(tri.a, tri.b), tri.c));
    }
    return BoundingBox(minB, maxB);
}


Hit computeHit(Ray ray, bool shouldHitNormalsFromBack, Mesh insideMesh)
{
    Hit closestHit;
    closestHit.hit = false;
    closestHit.distance = 1E6;

    if (shouldHitNormalsFromBack) {
        Mesh mesh = insideMesh;
        for (uint j = mesh.startIdx; j < mesh.endIdx; j++) {
            Triangle tri = getTransformedTriangle(iTriangles[j], mesh.transform);
            Hit hit = rayTriangle(ray, tri, true);
            if (hit.hit && hit.distance < closestHit.distance) {
                closestHit = hit;
                closestHit.mesh = mesh;
                break;
            }
        }
        return closestHit;
    }

    for (uint i = 0; i < iNumMeshes; i++) {
        Mesh mesh = iMeshes[i];
        BoundingBox box = getMeshBoundingBox(mesh);
        if (!isRayBoundingBoxIntersect(ray, box.min, box.max)) {
            continue;
        }

        for (uint j = mesh.startIdx; j < mesh.endIdx; j++) {
            Triangle tri = getTransformedTriangle(iTriangles[j], mesh.transform);
            Hit hit = rayTriangle(ray, tri, false);
            if (hit.hit && hit.distance < closestHit.distance) {
                closestHit = hit;
                closestHit.mesh = mesh;
                break;
            }
        }
    }
    return closestHit;
}

vec3 lerp(vec3 a, vec3 b, float t) {
    return a * (1.0 - t) + b * t;
}

vec3 environmentLight(Ray ray) {
    // Horizon should be whitish, zenith should be blueish and ground should be dark (like brownish)
    vec3 horizonColor = vec3(1., 1., 1.);
    vec3 zenithColor = vec3(0.5, 0.7, 1.0);
    vec3 groundColor = vec3(0.2, 0.17, 0.1);
    vec3 sunDirection = normalize(vec3(0.5, 0.5, 0.5));
    float sunFocus = 1;
    float sunIntensity = 0.01;

    vec3 dir = vec3(ray.direction.x, -ray.direction.y, ray.direction.z);

    float skyGradientT = pow(smoothstep(0, 0.4, dir.y), 0.35);
    vec3 skyGradient = lerp(horizonColor, zenithColor, skyGradientT);
    float sun = pow(max(0, dot(dir, -sunDirection)), sunFocus) * sunIntensity;

    float groundToSkyT = smoothstep(-0.01, 0, dir.y);
    float sunMask = groundToSkyT >= 1.0 ? 0.0 : 1.0;
    return lerp(groundColor, skyGradient, groundToSkyT) + sun * sunMask;
}

vec3 customReflect(vec3 incoming, vec3 surfaceNormal, float fromRefractionIndex, float toRefractionIndex) {
    float n = fromRefractionIndex / toRefractionIndex;
    float cosI = -dot(surfaceNormal, incoming);
    float sinT2 = n * n * (1.0 - cosI * cosI);
    if (sinT2 > 1.0) {
        return reflect(incoming, surfaceNormal);
    }
    float cosT = sqrt(1.0 - sinT2);
    return n * incoming + (n * cosI - cosT) * surfaceNormal;
}

vec3 raytrace(Ray ray, inout uint seed) {
    vec3 incomingLight = vec3(0.0, 0.0, 0.0);
    vec3 color = vec3(1.0, 1.0, 1.0);
    bool isInsideMesh = false;
    float fromRefractionIndex = 1.0;
    Mesh insideMesh;

    const uint maxBounces = 6;
    for (uint bounce = 0; bounce < maxBounces; bounce++) {
        Hit hit = computeHit(ray, isInsideMesh, insideMesh);
        Material material = hit.mesh.material;

        if (hit.hit) {
            ray.origin = hit.position;
            vec3 directLight;
            vec3 newColor;
            if (material.hasCheckerPattern) {
                newColor = mod(hit.position.x, 1.0) < 0.5 == mod(hit.position.z, 1.0) < 0.5 ? material.color : vec3(1.0 - material.color);
                directLight = newColor * material.emissionIntensity;
            } else if (hit.mesh.textureOffset >= 0) {
                vec2 uv = hit.uv;
                uv.x = (uv.x * hit.mesh.textureWidth + hit.mesh.textureOffset) / mainTextureWidth;
                newColor = texture(textures, uv).rgb;
                directLight = texture(textures, uv).rgb * material.emissionIntensity;
            } else {
                directLight = material.emission * material.emissionIntensity;
                newColor = material.color;
            }
            bool goesThrough = randomValue(seed) <= material.transparency;
            if (goesThrough || isInsideMesh) { // Refraction
                float toRefractionIndex = isInsideMesh ? 1.0 : material.refractionIndex;
                float incidentAngle = acos(dot(-ray.direction, hit.normal));
                // Calculate critical angle for total internal reflection (TIR) using Snell's law
                // The critical angle is the angle of incidence that provides an angle of refraction of 90 degrees
                float criticalAngle = asin(toRefractionIndex / fromRefractionIndex);
                // if incident angle is greater than critical angle we have TIR and the ray is reflected
                // also if the ray is going from a less dense medium to a more dense medium we can't have total internal reflection
                // So we skip the refraction calculation
                if (incidentAngle < criticalAngle || fromRefractionIndex <= toRefractionIndex) {
                    // If we were inside the mesh, we are now outside and vice versa
                    isInsideMesh = !isInsideMesh;
                    // Calculate refraction direction using Snell's law
                    vec3 refractedDirection = customReflect(ray.direction, hit.normal, fromRefractionIndex, toRefractionIndex);
                    ray.direction = normalize(refractedDirection);
                    // If we are inside the mesh the new refraction index is the one of the mesh
                    // Otherwise it is 1.0 (air)
                    if (isInsideMesh) {
                        fromRefractionIndex = material.refractionIndex;
                        insideMesh = hit.mesh;
                    } else {
                        fromRefractionIndex = 1.0;
                    }
                    color *= newColor;
                } else { // Total internal reflection
                    // If we were inside the mesh, we stay inside the mesh and vice versa
                    // If we were outside the reflection can be a diffuse reflection
                    if (!isInsideMesh) {
                        vec3 diffuseDirection = normalize(hit.normal + randomDirection(seed));
                        vec3 specularDirection = reflect(ray.direction, hit.normal);
                        ray.direction = mix(diffuseDirection, specularDirection, 1.0 - material.roughness);
                        color *= newColor;
                    } else {
                        ray.direction = reflect(ray.direction, hit.normal);
                        color *= newColor;
                    }
                }
            } else { // Reflection
                vec3 diffuseDirection = normalize(hit.normal + randomDirection(seed));
                vec3 specularDirection = reflect(ray.direction, hit.normal);
                ray.direction = mix(diffuseDirection, specularDirection, 1.0 - material.roughness);
                float lightIntensity = dot(hit.normal, ray.direction);
                incomingLight += directLight * color;
                color *= newColor * lightIntensity * 2;
            }
        } else {
            if (iIsSkyboxEnabled > 0) {
                incomingLight += environmentLight(ray) * color;
            }
            break;
        }
    }

    return incomingLight;
}

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    vec4 pixel = imageLoad(inputImage, pixelCoords);
    if (iIsSceneDirty == 1) {
        pixel = vec4(0.0, 0.0, 0.0, 1.0);
    }
    vec2 uv = (vec2(pixelCoords)) / iResolution;
    vec3 viewPointLocal = vec3(uv - 0.5, 1.0) * iViewPlaneParams;
    vec3 viewPointWorld = (iCameraMatrix * vec4(viewPointLocal, 1.0)).xyz;
    uint seed = int(pixelCoords.x) * int(iResolution.x * iResolution.y) + int(pixelCoords.y) + iFrameIndex * 719393;

    Ray ray;
    ray.origin = iCameraPosition;
    ray.direction = normalize(viewPointWorld - iCameraPosition);
    vec3 incomingLight = vec3(0.0, 0.0, 0.0);
    uint numRaysPerPixel = 10;

    for (uint i = 0; i < numRaysPerPixel; i++) {
        incomingLight += raytrace(ray, seed);
    }
    incomingLight /= float(numRaysPerPixel);

    // Result pixel is the mix of the previous pixel and the new color
    float weight = 1.0 / (float(iFrameCount + 1));
    vec4 newPixel = pixel * (1.0 - weight) + vec4(incomingLight, 1.0) * weight;
    imageStore(outputImage, pixelCoords, newPixel);
}
